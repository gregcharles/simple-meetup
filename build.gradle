import org.asciidoctor.gradle.AsciidoctorTask

// tag::configure-spring-boot-gradle-plugin[]
buildscript {
    ext {
        springBootVersion = "2.0.0.M7"
    }
    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    }
}

// end::configure-spring-boot-gradle-plugin[]

// tag::jacoco-setup[]
plugins {
    // end::jacoco-setup[]
    id "java"
    id "idea"
    id "checkstyle"
    id "org.asciidoctor.convert" version "1.5.6"
    // tag::jacoco-setup[]
    id "jacoco"
}
// end::jacoco-setup[]

apply plugin: "org.springframework.boot"
// tag::configure-spring-boot-gradle-plugin[]
apply plugin: "io.spring.dependency-management"
// end::configure-spring-boot-gradle-plugin[]

group = "eu.michael-simons"
version = "0.0.1-SNAPSHOT"

repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
    maven { url "https://dl.bintray.com/palantir/releases" }
}

// tag::test-dependencies[]
// tag::using-managed-dependencies[]
dependencies {
// end::test-dependencies[]
// end::using-managed-dependencies[]
    checkstyle "com.puppycrawl.tools:checkstyle:8.4"

    compile "org.springframework.boot:spring-boot-starter-data-jpa"
    compile "org.springframework.boot:spring-boot-starter-web"
    // tag::using-managed-dependencies[]
    compile "org.springframework.boot:spring-boot-starter-hateoas"
    // end::using-managed-dependencies[]
    compile "org.flywaydb:flyway-core"

    compileOnly "org.projectlombok:lombok:1.16.18"

    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"

    compile "org.springframework.boot:spring-boot-devtools"

    runtime "com.h2database:h2"
    runtime "org.postgresql:postgresql"

    // tag::test-dependencies[]
    testCompile "org.springframework.boot:spring-boot-starter-test"
    // end::test-dependencies[]
    testCompile "org.springframework.restdocs:spring-restdocs-mockmvc"
    testCompile "com.palantir.docker.compose:docker-compose-rule-junit4:0.32.1"

    asciidoctor 'org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.15'
// tag::test-dependencies[]
// tag::using-managed-dependencies[]
}
// end::test-dependencies[]
// end::using-managed-dependencies[]

// tag::integration-test-setup[]
sourceSets { // <1>
    integrationTest {
        java {
            srcDir 'src/integrationTest/java'
        }
        resources {
            srcDir 'src/integrationTest/resources'
        }
        compileClasspath += sourceSets.test.compileClasspath
        runtimeClasspath += sourceSets.test.runtimeClasspath
    }
}

task integrationTest(type: Test) { // <2>
    group = LifecycleBasePlugin.VERIFICATION_GROUP
    // end::integration-test-setup[]
    description = 'Runs the integration tests.'
    // tag::integration-test-setup[]

    systemProperty "spring.profiles.active", "it" // <3>

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    // end::integration-test-setup[]
    outputs.upToDateWhen { false }
    // tag::integration-test-setup[]
}
// end::integration-test-setup[]

check.dependsOn integrationTest
integrationTest.mustRunAfter test

// tag::jacoco-setup[]

jacocoTestCoverageVerification {
    executionData test, integrationTest
    violationRules {
        rule {
            limit {
                minimum = 0.6
            }
        }
    }
}

jacocoTestReport {
    executionData test, integrationTest
}

build.dependsOn jacocoTestCoverageVerification, jacocoTestReport
// end::jacoco-setup[]

// common settings for asciidoctor
tasks.withType(AsciidoctorTask) { docTask ->
    dependsOn check

    attributes \
          'sourceDir': "$projectDir/src/"

    sourceDir = new File("src/articles")
    outputDir = new File(project.buildDir, "articles")
    resources {
        from(sourceDir) {
            include '*.png'
        }
    }
}

task generateHTML (
        type: AsciidoctorTask,
        group: 'docToolchain',
        description: 'use html5 as asciidoc backend') {

    backends = ['html5']
}

task generatePDF (
        type: AsciidoctorTask,
        group: 'docToolchain',
        description: 'use pdf as asciidoc backend') {

    backends = ['pdf']
}

task generateDocBook (
        type: AsciidoctorTask,
        group: 'docToolchain',
        description: 'use docbook as asciidoc backend') {

    backends = ['docbook']
}

task convertToDocx (
        dependsOn: 'generateDocBook',
        group: 'docToolchain',
        type: Exec
) {
    doFirst {
        new File(generateDocBook.outputDir, "docx").mkdirs()
    }
    workingDir = new File(generateDocBook.outputDir, "docbook")
    executable = "pandoc"
    args = ['-r','docbook',
            '-t','docx',
            '-o','../docx/ddd-und-tdd-mit-spring-boot-2_de.docx',
            'ddd-und-tdd-mit-spring-boot-2_de.xml']
}

defaultTasks "clean", "build", "generateHTML", "generatePDF"
