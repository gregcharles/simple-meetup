import java.nio.file.Paths

buildscript {
    ext {
        springBootVersion = "2.0.0.M6"
        generatedApiDoc = file(Paths.get(project.buildDir.toString(), "generated-api-doc"))
    }
    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    }
}

plugins {
    id "java"
    id "idea"
    id "checkstyle"
    id "org.asciidoctor.convert" version "1.5.6"
}

apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"

group = "eu.michael-simons"
version = "0.0.1-SNAPSHOT"

repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
    maven { url "https://dl.bintray.com/palantir/releases" }
}

// tag::test-dependencies[]
dependencies {
// end::test-dependencies[]
    checkstyle "com.puppycrawl.tools:checkstyle:8.4"

    compile "org.springframework.boot:spring-boot-starter-data-jpa"
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-starter-hateoas"

    compileOnly "org.projectlombok:lombok:1.16.18"

    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"

    compile "org.springframework.boot:spring-boot-devtools"

    runtime "com.h2database:h2"
    runtime "org.postgresql:postgresql"

    // tag::test-dependencies[]
    testCompile "org.springframework.boot:spring-boot-starter-test"
    // end::test-dependencies[]
    testCompile "org.springframework.restdocs:spring-restdocs-mockmvc"
    testCompile "com.palantir.docker.compose:docker-compose-rule-junit4:0.32.1"
// tag::test-dependencies[]
}
// end::test-dependencies[]

test {
    outputs.dir generatedApiDoc
}

sourceSets {
    integrationTest {
        java {
            srcDir 'src/integrationTest/java'
        }
        resources {
            srcDir 'src/integrationTest/resources'
        }
        compileClasspath += sourceSets.test.compileClasspath
        runtimeClasspath += sourceSets.test.runtimeClasspath
    }
}

task integrationTest(type: Test) {
    group = LifecycleBasePlugin.VERIFICATION_GROUP
    description = 'Runs the integration tests.'

    systemProperty "spring.profiles.active", "it"

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath

    outputs.upToDateWhen { false }
}

check.dependsOn integrationTest
integrationTest.mustRunAfter test

asciidoctor {
    dependsOn check

    sourceDir = file("src/article")
    inputs.dir generatedApiDoc
    outputDir = file(Paths.get(project.buildDir.toString(), "article"))
    resources {
        from(sourceDir) {
            include '*.png'
        }
    }
}

defaultTasks "clean", "build", "asciidoctor"
